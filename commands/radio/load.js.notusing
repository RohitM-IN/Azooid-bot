const { ErelaClient, Utils } = require("erela.js");
const { RichEmbed } = require("discord.js")



module.exports = { 
        name: "load",
        description: "displays songs queue",
        accessableby: "Member",
        category: "music",
    run: async (client, message, args, db) => {
        // const player = client.music.players.get(message.guild.id);
        // const { voiceChannel } = message.member;
        // let play
        // if(!player) {
        //     play = client.music.players.spawn({
        //         guild: message.guild,
        //         textChannel: message.channel,
        //         voiceChannel
        //     });
        // }
 
        //     let query = db.collection('guilds').doc(message.guild.id).collection('playlists')
        //     let guilds = {} 
        //     let promise = new Promise(async function(resolve) {
            
        //     await query.get().then(snapshot => {
        //         //console.log(snapshot)
        //     let remaining = snapshot.size; 
        //         snapshot.forEach(doc => {
        //             guilds[doc.id] = doc.data();
        //             remaining--;
        //             if (!remaining) resolve(guilds);
        //         });
        //         })
        //     });
        //         promise.then(async function (guilds) {
        //             let temp = { guilds };
        //             temp = temp.guilds['01']
        //             const objectArray = Object.entries(temp);
        //             let songs = []
        //             objectArray.forEach(([key, value]) => {
        //                 songs.push(value)
                    
        //     });
        //     let state = false;
        //     for(let i =0 ; i <songs.length ;i++){
        //         client.music.search(songs[i], message.author).then(async res => {
        //             switch (res.loadType) {
        //                 case "TRACK_LOADED":
        //                     play.queue.add(res.tracks[0]);
        //                     //message.channel.send(`Adding \`${res.tracks[0].title}\` \`${Utils.formatTime(res.tracks[0].duration, true)}\``);
        //                     if (!play.playing){
        //                         play.play()
        //                         state = true;
        //                     } 
        //                     break;
        //                 case "PLAYLIST_LOADED":
        //                     res.playlist.tracks.forEach(track => play.queue.add(track));
        //                     //const duration = Utils.formatTime(res.playlist.tracks.reduce((acc, cur) => ({duration: acc.duration + cur.duration})).duration, true);
        //                     //message.channel.send(`Adding \`${res.playlist.tracks.length}\` \`${duration}\` tracks in playlist \`${res.playlist.info.name}\``);
        //                     if(!play.playing) play.play();
        //                     break;
                        
        //                 case "LOAD_FAILED":
        //                     message.channel.send(`Unable to add ${songs[i]} song!!`);
        //                     break;
        //             }
        //         }).catch(err => message.channel.send(err.message))
        //     }
        //    if(state) message.channel.send(`Added playlist to the queue`)  

        //   })
    }
}